<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://dangils.github.io//</id><title>Hangil's Note</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-01-05T21:30:45+09:00</updated> <author> <name>Lee Han Gil</name> <uri>https://dangils.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://dangils.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://dangils.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Lee Han Gil </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[AI] Time Series 개요</title><link href="https://dangils.github.io//posts/Time-Series/" rel="alternate" type="text/html" title="[AI] Time Series 개요" /><published>2023-01-05T21:27:02+09:00</published> <updated>2023-01-05T21:27:02+09:00</updated> <id>https://dangils.github.io//posts/Time-Series/</id> <content src="https://dangils.github.io//posts/Time-Series/" /> <author> <name>Lee Han Gil</name> </author> <category term="AI" /> <category term="Time Series" /> <summary> Time Series Forecasting model Time SERIES Forecasting model의 분류 Univariate : 하나의 특성을 사용 Multivariate: 여러 개의 특성 사용 TIme series Forecasting model 알고리즘 Autoregressive (AR) : 시계열의 이전 값과 이후 값 사이 어느 정도의 상관 관계(자기 상관)가 있을 때 사용 Autoregressive Integrated Moving Average (ARIMA) : 시계열 예측에 있어 가장 많이 사용되는 모델, 시계열 데이터 내 자체적으로 lagged (지연된) 데이터를 생성해 이를 예측한 오류를 기반으로 계산하는 방식 Seasonal Autoregressive... </summary> </entry> <entry><title>[AI] R-CNN/Fast R-CNN/Faster R-CNN 정리</title><link href="https://dangils.github.io//posts/R-CNN-Faster-R-CNN/" rel="alternate" type="text/html" title="[AI] R-CNN/Fast R-CNN/Faster R-CNN 정리" /><published>2023-01-03T23:24:12+09:00</published> <updated>2023-01-03T23:24:12+09:00</updated> <id>https://dangils.github.io//posts/R-CNN-Faster-R-CNN/</id> <content src="https://dangils.github.io//posts/R-CNN-Faster-R-CNN/" /> <author> <name>Lee Han Gil</name> </author> <category term="AI" /> <category term="Vision" /> <summary> Object Detection 참고 1-stage detector : 1-stage는 2-stage와 다르게 RoI영역을 먼저 추출하지 않고 전체 image에 대해서 convolution network로 classification, box regression(localization)을 수행 2-stage detector : Selective search, Region proposal network와 같은 알고리즘을 및 네트워크를 통해 object가 있을만한 영역을 우선 뽑아낸다. 이 영역을 RoI(Region of Interest)라고 한다. 이런 영역들을 우선 뽑아내고 나면 각 영역들을 convolution network를 통해 classification, box... </summary> </entry> <entry><title>[AI] 딥러닝 논문 일반적인 구현 패턴</title><link href="https://dangils.github.io//posts/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EB%85%BC%EB%AC%B8-%EA%B5%AC%ED%98%84%ED%8C%A8%ED%84%B4/" rel="alternate" type="text/html" title="[AI] 딥러닝 논문 일반적인 구현 패턴" /><published>2022-09-30T21:27:50+09:00</published> <updated>2023-01-03T23:31:49+09:00</updated> <id>https://dangils.github.io//posts/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EB%85%BC%EB%AC%B8-%EA%B5%AC%ED%98%84%ED%8C%A8%ED%84%B4/</id> <content src="https://dangils.github.io//posts/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EB%85%BC%EB%AC%B8-%EA%B5%AC%ED%98%84%ED%8C%A8%ED%84%B4/" /> <author> <name>Lee Han Gil</name> </author> <category term="AI" /> <category term="Deep Learning Theory" /> <summary> 딥러닝 논문 구현 방법 개요 일반적인 구현 패턴 1) train.py : 모델 class를 인스턴스로 선언하고 For-loop을 돌면서 gradient descent를 수행하면서 파라미터를 업데이트하는 로직 원하는 epoch만큼 파라미터를 업데이트 하는 실제 트레이닝 수행 - 추가적으로 파라미터 저장, 텐서보드 로그 저장등 추가 가능 2) evaluate.py/test.py : Training된 파라미터를 불러와서 evaluation이나 test/inference를 진행하는 로직 현재 파라미터에 기반한 학습에서 중간중간 파라미터의 성능을 평가 - 학습이 완전히 끝난경우 test/inference 진행 - 효율성을 위해 train.py 실행되는 도중 중간중간... </summary> </entry> <entry><title>[AI] 딥러닝 논문 읽기 팁</title><link href="https://dangils.github.io//posts/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EB%85%BC%EB%AC%B8%EC%9D%BD%EA%B8%B0-%ED%8C%81/" rel="alternate" type="text/html" title="[AI] 딥러닝 논문 읽기 팁" /><published>2022-09-29T19:13:03+09:00</published> <updated>2023-01-03T23:42:37+09:00</updated> <id>https://dangils.github.io//posts/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EB%85%BC%EB%AC%B8%EC%9D%BD%EA%B8%B0-%ED%8C%81/</id> <content src="https://dangils.github.io//posts/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EB%85%BC%EB%AC%B8%EC%9D%BD%EA%B8%B0-%ED%8C%81/" /> <author> <name>Lee Han Gil</name> </author> <category term="AI" /> <category term="Deep Learning Theory" /> <summary> 일반적인 딥러닝 논문의 구성 1) Abstract : 논문의 전체적인 컨셉을 요약 설명 2) Introduction : 논문의 아이디어 전개 방식 등에 대한 설명 3) Method : 논문의 기법과 구현에 대한 아이디어 상세한 설명 - Model - Loss - Techniques 4) Experiment : 논문의 기법의 성능에 대한 평가 5) Conclusion : 논문의 내용을 정리 및 향후 연구방향 제시 용어 state-of-the-art(SOTA) : 논문에서 제안한 기법이 동일한 종류의 기법중에서 가장 뛰어난 성능을 가진다. end-to-end : 종단간 학습(input과 target 데이터만을 neural network에 맡기고 중간... </summary> </entry> <entry><title>[AI] Object Detection 문제영역과 metric 정리</title><link href="https://dangils.github.io//posts/Object_detection_%EB%AC%B8%EC%A0%9C%EC%98%81%EC%97%AD-%EC%A0%95%EB%A6%AC/" rel="alternate" type="text/html" title="[AI] Object Detection 문제영역과 metric 정리" /><published>2022-09-27T22:33:12+09:00</published> <updated>2022-11-09T19:39:54+09:00</updated> <id>https://dangils.github.io//posts/Object_detection_%EB%AC%B8%EC%A0%9C%EC%98%81%EC%97%AD-%EC%A0%95%EB%A6%AC/</id> <content src="https://dangils.github.io//posts/Object_detection_%EB%AC%B8%EC%A0%9C%EC%98%81%EC%97%AD-%EC%A0%95%EB%A6%AC/" /> <author> <name>Lee Han Gil</name> </author> <category term="AI" /> <category term="Vision" /> <summary> 컴퓨터 비전의 대표적인 문제 1) Image Classification 이미지를 알고리즘에 입력하여 그 이미지가 어떤 클래스 라벨에 속하는지 분류 하는것 2) Semantic Image Segmentation 단순히 사진을 보고 분류하는 것에 그치지 않고 그 장면을 완벽하게 이해하는 수준의 문제 위의 사진 처럼 모든 픽셀을 해당하는 class로 분류 하는 것(이미지에 있는 모든 픽셀에 대한 예측을 하는 것이기 때문에 dense prediction 이라고도 불림) 3) Object Detection 물체 검출은 이미지 내에서 알고리즘을 훈련시킬 때 사용된 라벨에 속하는 모든 물체를 검출하는 것 물체가 있는 영역의 위치 정보를 Bounding Box로 찾고 사물의 라벨... </summary> </entry> </feed>
