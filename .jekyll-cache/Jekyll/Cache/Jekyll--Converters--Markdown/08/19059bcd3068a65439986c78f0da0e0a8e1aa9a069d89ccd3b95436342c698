I"<h3 id="dynamic-programming">Dynamic Programming</h3>

<blockquote>
  <h3 id="프로그래밍에서-다이나믹이란">프로그래밍에서 다이나믹이란?</h3>
  <ul>
    <li>‘프로그램이 실행되는 도중에 ‘ 라는 의미</li>
  </ul>
</blockquote>

<h3 id="다이나믹-프로그래밍-사용-조건">다이나믹 프로그래밍 사용 조건</h3>
<p>1) 큰 문제를 작은 문제로 나눌 수 있다.
2) 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.</p>

<hr />

<blockquote>
  <p>Memoization(메모이제이션) 기법이란?</p>
  <ul>
    <li>다이나믹 프로그래밍을 구현하는 방법 중 하나로, 구한 결과를 메모리
공간에 저장하고 같은 식을 호출하면 저장한 값을 가져오는 방식</li>
    <li>값을 저장하는 방법으로 캐싱(caching)이라고도 한다</li>
  </ul>
</blockquote>

<p><br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="c1"># Memoization을 활용한 피보나치 수열 구현
# Memoization -&gt; 탑다운 방식
</span>
<span class="c1"># 한 번 계산된 결과를 메모이제이션 하기 위한 리스트 초기화
</span><span class="n">d</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span>

<span class="c1"># 피보나치 함수(Fibonacci Function)를 재귀함수로 구현(탑다운 다이나믹)
</span><span class="k">def</span> <span class="nf">fibo</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="c1"># 종료 조건(1 혹은 2일 때 1을 반환)
</span>    <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>

    <span class="c1"># 이미 계산한적 있는 문제라면 그대로 반환
</span>    <span class="k">if</span> <span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>

    <span class="c1"># 아직 계산하지 않은 문제라면 점화식에 따라 피보나치 반환
</span>    <span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">fibo</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibo</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>

<span class="k">print</span><span class="p">(</span><span class="n">fibo</span><span class="p">(</span><span class="mi">99</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="c1"># 피보나치수열 보텀업 방식
</span>
<span class="c1"># 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
</span><span class="n">d</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span>

<span class="c1"># 첫 번째 피보나치 수와 두 번째 피보나치 저장
</span><span class="n">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">99</span>

<span class="c1"># 피보나치 반복문으로 구현(보텀업 다이나믹 프로그래밍)
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>

<span class="k">print</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>보텀업 방식에서 사용되는 결과 저장용 리스트는 ‘DP 테이블’ 이라고 부르며
메모이제이션은 탑다운 방식에 국한되어 사용되는 표현이다.</li>
</ul>

<p><br /></p>

:ET